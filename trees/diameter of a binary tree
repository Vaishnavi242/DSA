Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.

Example 1:
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].

Example 2:
Input: root = [1,2]
Output: 1

APPROACH 1:
->for every node find the sum of left height and right height
->return the maximum sum of all the nodes

CODE:
int height(TreeNode* root)
    {
        if(root==NULL)
            return 0;
        int lh=height(root->left);
        int rh=height(root->right);
        return 1+max(lh,rh);
    }
    
int diameterOfBinaryTree(TreeNode* root) {
        if(root==NULL)
        {
            return 0;
        }
        int lh=height(root->left);
        int rh=height(root->right);
        int h=lh+rh;
        h=max(h,diameterOfBinaryTree(root->left));
        h=max(h,diameterOfBinaryTree(root->right));
        return h;
    }
    
APPROACH 2:
->instead of checking the left and right height of each node
->while calculating the height of the root keep track of max sum of left and riht height at every point

code:
 int height(TreeNode* root,int &diameter)
    {
        if(root==NULL)
            return 0;
        int lh=height(root->left,diameter);
        int rh=height(root->right,diameter);
        diameter=max(diameter,lh+rh);
        return 1+max(lh,rh);
    }
    int diameterOfBinaryTree(TreeNode* root) {
        int diameter=0;
        height(root,diameter);
        return diameter;
    }
