Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as:
a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: true

Example 2:
Input: root = [1,2,2,3,3,null,null,4,4]
Output: false

Example 3:
Input: root = []
Output: true

APPROACH:
->for every node calculate the left height and right height and check if it is balanced or not

CODE:
 int height(TreeNode* root)
    {
        if(root==NULL)
            return 0;
        int lh=height(root->left);
        int rh=height(root->right);
        return 1+max(lh,rh);
    }
    bool isBalanced(TreeNode* root) {
        if(root==NULL)
            return true;
        if(abs(height(root->left)-height(root->right))>1)
           {
               return false; 
           }
         return isBalanced(root->left)&&isBalanced(root->right);
    }
    
APPROACH 2:
->instead of checking lh and rh of each node
->while calculating the depth of a tree check for lh-rh>1 return -1
->if at any point we get -1 then it is not considered as balanced tree

CODE:
 int height(TreeNode* root)
    {
        if(root==NULL)
            return 0;
        int lh=height(root->left);
        int rh=height(root->right);
        if(lh==-1 || rh==-1)
            return -1;
        if(abs(lh-rh)>1)
            return -1;
        
        return 1+max(lh,rh);
    }
    bool isBalanced(TreeNode* root) {
        if(root==NULL)
            return true;
        if(height(root)==-1)
           {
               return false; 
           }
         return true;
    }
