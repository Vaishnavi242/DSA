post order traversal follows 
left right root
          1
         / \
        2   3
       / \ / \
       4 5 6  7
  
postorder travesal: 4 5 2 6 7 3 1

APPROACH :
->take 2 stacks
->push the root to the 1st stack
->take the top element of the stack push the data of the element into 2nd stack and pop te element from the 1 stack
->check for the left and right child
->if present push in to 1st stack
->repeate untill 1st stack is empty
->print the elements from the 2nd stack untill it is empty

CODE:
 vector<int> postorderTraversal(TreeNode* root) {
        stack<TreeNode*> s1;
        stack<int> s2;
        vector<int> v;
        if(root==NULL)
            return v;
        s1.push(root);
        while(!s1.empty())
        {
            TreeNode* node=s1.top();
            s1.pop();
            s2.push(node->val);
            if(node->left!=NULL)
                s1.push(node->left);
            if(node->right!=NULL)
                s1.push(node->right); 
        }
        while(!s2.empty())
        {
            int data=s2.top();
            s2.pop();
            v.push_back(data);
        }
        return v;
    }
 
