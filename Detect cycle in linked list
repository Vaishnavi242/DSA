Given head, the head of a linked list, determine if the linked list has a cycle in it.
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.
Return true if there is a cycle in the linked list. Otherwise, return false.

 
Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

Example 2:
Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.

Example 3:
Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.


CODE:

Brute force:
Create a map traverse the linked list and 
insert the nodes if not present in map with val=1
if present in map it means it has been already visited so return true.

 bool hasCycle(ListNode *head) {
        ListNode* temp=head;
        unordered_map<ListNode*,int> m;
        m[temp]=1;
        while(temp!=NULL)
        {
            temp=temp->next;
            if(m.find(temp)==m.end())
            {
                m[temp]=1;
            }
            else{
                return true;
            }
        }
        return false;
 }
 
Efficient approach: (floyd's cycle algorithm)
Create 2 nodes slow and fast that points to head.
move slow pointer by 1 and fast pointe by 2 
if they both point to same node then there exists cycle.

 bool hasCycle(ListNode *head) {
        ListNode* slow=head;
        ListNode* fast=head;
         while(fast && fast->next)
         {
             slow=slow->next;
             fast=fast->next->next;
             if(slow==fast)
                 return true;  
         }
        return false;
    }
