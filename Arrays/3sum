Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Example 2:
Input: nums = []
Output: []

Example 3:
Input: nums = [0]
Output: []

CODE:
sort the array
start i=0,j=i+1 and k=n-1
if the sum of 3 nums is equal to target retrun ans
if it is less than target increment j
if t is more than taget decrement k

vector<vector<int>> threeSum(vector<int>& nums) {
      sort(nums.begin(),nums.end());
      int n=nums.size();
      vector<vector<int>> ans;
        for(int i=0;i<n-2;i++)
        {
            int a=nums[i];
            int j=i+1,k=n-1;
            if(i==0 || (i>0 && nums[i]!=nums[i-1]))
            {
            while(j<k)
            {
                vector<int> res;
                int b=nums[j],c=nums[k];
                if(a+b+c==0)
                {
                    res.push_back(a);
                    res.push_back(b);
                    res.push_back(c);
                    ans.push_back(res);
                    while(j<k && nums[j]==nums[j+1])
                        j++;
                    while(j<k && nums[k]==nums[k-1])
                        k--;
                    j++;
                    k--;
                }
                else if(a+b+c<0)
                {
                    j++;
                }
                else{
                    k--;
                }
            }
            }
        }
        return ans;
    }
