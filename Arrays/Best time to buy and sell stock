You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

CODE:

Brute force:
tarverse the array, for each element calculate the profit with the other elements and always compare with the max 

 int maxProfit(vector<int>& prices) {
        int n=prices.size();
        int m=INT_MIN;
        for(int i=0;i<n;i++)
        {
          for(int j=i+1;j<n;j++)
          {
              m=max(m,prices[j]-prices[i]);
          }
        }
        if(m<0)
            return 0;
        return m;
     }
     
 Efficient Approach:
 tarverse the array,keep track of min element from the previous elements and calculate the profit
 
 int maxProfit(vector<int>& prices) {
  int n=prices.size();
        int min_price=INT_MAX;
        int ans=0;
        for(int i=0;i<n;i++)
        {
           min_price=min(min_price,prices[i]) ;
           int profit=prices[i]-min_price;
           ans=max(ans,profit);
        }
        return ans;
    }
