Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.
A subarray is a contiguous non-empty sequence of elements within an array.

Example 1:
Input: nums = [1,1,1], k = 2
Output: 2

Example 2:
Input: nums = [1,2,3], k = 3
Output: 2

CODE:
Brute force:
for each element calculate the subarrays sum and check if it equals k

 int subarraySum(vector<int>& nums, int k) {
        int n=nums.size();
        int count=0;
        for(int i=0;i<n;i++)
        {
            int sum=0;
            for(int j=i;j<n;j++)
            {
                sum+=nums[j];
                if(sum==k)
                    count++;
            }
        }
        return count;
   }
   
  Effiecient approach:
 for each element calculate the prefix sum and insert in to map
 find if prefix of element-k is present in map 
 if it is present increment count by value.
 
 example:
[1,2,3] k=3
prefix=[1,3,6]
count=0;
i=0-> prefix-k=1-3=-2 m[1]=1
i=1-> prefix-k=3-3=0 prefix=3=k count=1; m[3]=1
i=2-> prefix-k=6-3=3 ,3 is present in map count=2;m[6]=1

 int subarraySum(vector<int>& nums, int k) {
        int sum=0;
        vector<int> prefix;
        unordered_map<int,int> m;
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
            prefix.push_back(sum);
        }
        for(int i=0;i<n;i++)
        {
            int val=prefix[i]-k;
            if(prefix[i]==k)
                count++;
            if(m.find(val)!=m.end())
                count+=m[val];
            m[prefix[i]]++;
        }
        return count;
    }
