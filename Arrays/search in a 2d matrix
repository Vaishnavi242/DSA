Given an m*n 2D matrix and an integer, write a program to find if the given integer exists in the matrix.
Given matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row

Example 1:
Input: matrix = 
[[1,3,5,7],
 [10,11,16,20],
 [23,30,34,60]], 
target = 3
Output: true

Explanation: As the given integer(target) exists in the given 2D matrix, the function has returned true.

APPROACH:
->check the target with the 1st and last element of the row 
->if present traverse the column
->otherwise go to the next the row

CODE:
bool findTargetInMatrix(vector < vector < int >> & mat, int m, int n, int target) {
    int i=0;
    while(i<m)
    {
      if(target>=mat[i][0] && target<=mat[i][n-1])
      {
          for(int j=0;j<n;j++)
          {
              if(target==mat[i][j])
                  return true;
          }
      }
        else
        {
            i++;
        }
    }
    return false;
    }
    
APPROACH:
->Consider the 2d matrix as array
->so the start index will be 0 and the last index will be m*n-1 and the middle element will be mat[mid/n][mid%n]
->Now do the binay search for the target

CODE:
bool findTargetInMatrix(vector < vector < int >> & mat, int m, int n, int target) {
int low=0,high=m*n-1;
    while(low<=high)
    {
        int mid=(low+high)/2;
        if(target==mat[mid/n][mid%n])
            return true;
        else if(mat[mid/n][mid%n]<target)
            low=mid+1;
        else
            high=mid-1;
    }
    return false;
}
