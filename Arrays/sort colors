Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]

CODE:
->count the no of 0's,1's and 2's
->place 0's,1's and 2's in order

void sortColors(vector<int>& nums) {
       int cred=0,cwhite=0,cblue=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0)
                cred++;
            else if(nums[i]==1)
                cwhite++;
            else
                cblue++;
        }
        int i=0;
        while(cred>0)
        {
            nums[i]=0;
            i++;
            cred--;
        }
        while(cwhite>0)
        {
            nums[i]=1;
            i++;
            cwhite--;
        }
        while(cblue>0)
        {
            nums[i]=2;
            i++;
            cblue--;
        }
    }
APPROACH 2:
->take low=0,mid=0 and high=1;
->low should contan element 0 mid positions should contain element 1 and high position should contain element 2
->so we compare mid if it is 0 swap with low element if it is 2 swap with high element

Code:

void sort012(int *arr, int n)
{
int low=0,mid=0,high=n-1;
    while(mid<=high)
    {
        switch(arr[mid])
        {
            case 0:{swap(arr[low],arr[mid]);
                    low++;
                    mid++;
                   break;
                   }
            case 1:{mid++;
                    break;
            }
            case 2:{swap(arr[mid],arr[high]);
                   high--;
                    break; 
            }
        }
    }
}
