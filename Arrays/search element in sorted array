There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity

Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:
Input: nums = [1], target = 0
Output: -1


APPROACH:
Modified binary search
->take left right and mid elmenets of the array
->if the target is equal to mid element return mid
->if the array is left sorted ie compare leftand mid element
 ->check if target is present in the left half,if present search in left half
 ->otherwise search in right half
 ->if the array is right sorted ie compare right and mid element
 ->check if target is present in right half,if present search in right half
 ->otherwise search in left half
 ->repeat untill left<=right
 
 CODE:
 int binarysearch(vector<int>& arr,int left,int right,int target)
    {
        if(left<=right)
        {
        int mid=(left+right)/2;
        if(arr[mid]==target)
            return mid;
        else if(arr[left]<=arr[mid])
        {
            if(arr[left]<=target && arr[mid]>=target)
            return binarysearch(arr,left,mid-1,target);
            else{
            return binarysearch(arr,mid+1,right,target);   
            }
        }
        else
        {
            if(arr[right]>=target && arr[mid]<=target)
             return binarysearch(arr,mid+1,right,target);
            else
             return binarysearch(arr,left,mid-1,target);   
        }
        
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
      int res=binarysearch(nums,0,nums.size()-1,target);  
          return res;
    }
 
