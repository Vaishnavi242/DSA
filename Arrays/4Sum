Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Example 2:
Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]

CODE:
sort the array
start i=0,j=i+1,k=j+1,l=n-1;
if the sum of 4 nums is equal to target return the ans
if it is less than target increment k
if it is greater than target decrement l
and every time check for the duplicates 

vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        vector<vector<int>> res;
        for(int i=0;i<n-3;i++)
        {
            if(i==0 || nums[i]!=nums[i-1])
            {
                for(int j=i+1;j<n-2;j++)
                {
                        int a,b;
                        a=nums[i],b=nums[j];
                        int sum=target-(a+b);
                        int k=j+1,l=n-1;
                        while(k<l)
                        {
                            vector<int> v;
                            if(nums[k]+nums[l]==sum)
                            {
                                v.push_back(a);
                                v.push_back(b);
                                v.push_back(nums[k]);
                                v.push_back(nums[l]);
                                res.push_back(v);
                                while(k<l && nums[k]==nums[k+1])
                                {
                                    k++;
                                }
                                while(k<l && nums[l]==nums[l-1])
                                {
                                    l--;
                                }
                                k++;
                                l--;
                            }
                            else if(nums[k]+nums[l]<sum)
                            {
                                k++;
                            }
                            else{
                                l--;
                            }
                        }
                        while(j<n-2 && nums[j]==nums[j+1])
                        {
                            j++;
                        }
                }
            }
        }
        return res;
    }
